/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Board from '../model/Board';
import ResponseEntity from '../model/ResponseEntity';

/**
 * Boards service.
 * @module api/BoardsApi
 * @version 1.0
 */
export default class BoardsApi {

    /**
     * Constructs a new BoardsApi.
     * @alias module:api/BoardsApi
     * @class
     * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link module:ApiClient#instance} if unspecified.
     */

    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addBoardUsingPOST operation.
     * @callback module:api/BoardsApi~addBoardUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new board
     * @param {Object} opts Optional parameters
     * @param {module:api/BoardsApi~addBoardUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseEntity}
     */
    addBoardUsingPOST(opts, callback) {
        opts = opts || {};
        let postBody = opts['body'];

        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = ['application/json'];
        let accepts = ['*/*'];
        let returnType = ResponseEntity;

        return axios.http(
            '/boards/', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }
    /**
     * Callback function to receive the result of the deleteBoardUsingDELETE operation.
     * @callback module:api/BoardsApi~deleteBoardUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a board
     * @param {module:api/BoardsApi~deleteBoardUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseEntity}
     */
    deleteBoardUsingDELETE(id, callback) {
        let postBody = null;

        let pathParams = {
            'id': id
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = [];
        let accepts = ['*/*'];
        let returnType = ResponseEntity;

        return this.apiClient.callApi(
            '/boards/{id}', 'DELETE',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }
    /**
     * Callback function to receive the result of the getBoardUsingGET operation.
     * @callback module:api/BoardsApi~getBoardUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get board by given id
     * @param {module:api/BoardsApi~getBoardUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseEntity}
     */
    getBoardUsingGET(id, callback) {
        let postBody = null;

        let pathParams = {
            'id': id
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = [];
        let accepts = ['*/*'];
        let returnType = ResponseEntity;

        return this.apiClient.callApi(
            '/boards/{id}', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }
    /**
     * Callback function to receive the result of the getBoardsUsingGET operation.
     * @callback module:api/BoardsApi~getBoardsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Board>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all boards
     * @param {module:api/BoardsApi~getBoardsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Board>}
     */
    getBoardsUsingGET(callback) {
        let postBody = null;

        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = [];
        let accepts = ['*/*'];
        let returnType = [Board];

        return this.apiClient.callApi(
            '/boards/', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the replaceBoardUsingPOST operation.
     * @callback module:api/BoardsApi~replaceBoardUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change board name
     * @param {Object} opts Optional parameters
     * @param {module:api/BoardsApi~replaceBoardUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseEntity}
     */
    replaceBoardUsingPOST(id, opts, callback) {
        opts = opts || {};
        let postBody = opts['body'];

        let pathParams = {
            'id': id
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = ['application/json'];
        let accepts = ['*/*'];
        let returnType = ResponseEntity;

        return this.apiClient.callApi(
            '/boards/{id}', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Get boards for specific user
     * @param {Object} opts Optional parameters
     * @param {module:api/UsersApi~replaceUserUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseEntity}
     */
    getUserBoardsUsingGET(id, opts, callback) {
        opts = opts || {};
        let postBody = opts['body'];

        let pathParams = {
            'id': id
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = ['application/json'];
        let accepts = ['*/*'];
        let returnType = ResponseEntity;

        return this.apiClient.callApi(
            '/users/{id}/boards', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }
}
